/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplicationhtmlunit.views;

import com.gargoylesoftware.htmlunit.ElementNotFoundException;
import javaapplicationhtmlunit.htmlUnitUtils.ElevListerHtmlUnit;
import java.awt.Color;
import java.awt.Component;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javaapplicationhtmlunit.data.ElevData;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import utils.Utils;

/**
 *
 * @author andersjuulr.petersen
 */
public class ElevListerView extends javax.swing.JFrame {
//hej
    DefaultTableModel tableModel;
    private static ElevListerHtmlUnit elevListerHtmlUnit;
    
    private static ElevData selectedElev;
    private static int selectedRow;

    /**
     * Creates new form NewJFrame
     */
    public ElevListerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hentKlasseData = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        klasseListeTabel = new javax.swing.JTable();
        infoLabel = new javax.swing.JLabel();
        seKritiskButton = new javax.swing.JButton();
        seAlleButton = new javax.swing.JButton();
        buttonUpdateWorkflow = new javax.swing.JButton();
        buttonShowWorkflow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        hentKlasseData.setText("Hent data");
        hentKlasseData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hentKlasseDataActionPerformed(evt);
            }
        });

        klasseListeTabel.setAutoCreateRowSorter(true);
        klasseListeTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        klasseListeTabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                klasseListeTabelMouseClicked(evt);
            }
        });
        klasseListeTabel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                klasseListeTabelKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(klasseListeTabel);

        infoLabel.setText("Data mangler - hent venligst data");
        infoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        seKritiskButton.setText("Vis kritiske");
        seKritiskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seKritiskButtonActionPerformed(evt);
            }
        });

        seAlleButton.setText("Vis alle");
        seAlleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seAlleButtonActionPerformed(evt);
            }
        });

        buttonUpdateWorkflow.setText("Update workflow");
        buttonUpdateWorkflow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateWorkflowActionPerformed(evt);
            }
        });

        buttonShowWorkflow.setText("Vis workflow");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hentKlasseData, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seAlleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seKritiskButton)
                                .addGap(334, 334, 334)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonUpdateWorkflow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonShowWorkflow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hentKlasseData)
                    .addComponent(seKritiskButton)
                    .addComponent(seAlleButton)
                    .addComponent(buttonUpdateWorkflow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(buttonShowWorkflow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hentKlasseDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hentKlasseDataActionPerformed
        
        setWorkflowButtonState(null);
        
        hentKlasseData.setEnabled(false);
        infoLabel.setText("forbinder til Lectio.dk vent veligst ...");

        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                try {
                    infoLabel.setText("data hentet");
                    
                    elevListerHtmlUnit = new ElevListerHtmlUnit();
                    elevListerHtmlUnit.getElevDataList();
                    
                    visEleverTabel(false);
                    
                    hentKlasseData.setEnabled(true);
                } catch (NumberFormatException | ElementNotFoundException | SecurityException | ParseException ex) {
                    Logger.getLogger(ElevListerView.class.getName()).log(Level.SEVERE, null, ex);
                    infoLabel.setText("forbindelses fejl");

                }
            }
        });


    }//GEN-LAST:event_hentKlasseDataActionPerformed

    private void seKritiskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seKritiskButtonActionPerformed
        setWorkflowButtonState(null);
        if (elevListerHtmlUnit != null)infoLabel.setText("Data vises for elever mere end 10% fravÃ¦r eller 15% skriftligt");
        visEleverTabel(true);
    }//GEN-LAST:event_seKritiskButtonActionPerformed

    private void seAlleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seAlleButtonActionPerformed
        setWorkflowButtonState(null);
        visEleverTabel(false);
    }//GEN-LAST:event_seAlleButtonActionPerformed

    private void visEleverTabel(boolean kunKritiske) {
        if (elevListerHtmlUnit != null) {
            infoLabel.setText("Data vises for alle elever");
        }
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }
        for (ElevData ed : elevListerHtmlUnit.elevArrayListe) {
            if(!kunKritiske || Utils.kritiskAlmF(ed) || Utils.kritiskSkrF(ed)) {
                Object[] rowList = {ed.navn, ed.almF, ed.skrF, ed.getStatus()};
                tableModel.addRow(rowList);
            }
        }
    }
    
    private void klasseListeTabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_klasseListeTabelMouseClicked
        handleRowSelection();
    }//GEN-LAST:event_klasseListeTabelMouseClicked

    private void klasseListeTabelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_klasseListeTabelKeyReleased
        handleRowSelection();
    }//GEN-LAST:event_klasseListeTabelKeyReleased
    
    private void buttonUpdateWorkflowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateWorkflowActionPerformed
       int input = JOptionPane.showConfirmDialog(
                null, 
                selectedElev.getWorkflowDialogText(), 
                "FravÃ¦rs Workflow", 
                JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.PLAIN_MESSAGE, 
                null);
       System.out.println(input);
       if(input == 0){
           selectedElev.proceedWorkflow(true);
       }
       
        updateRow(selectedRow, selectedElev);
        updateInfoLabel(selectedElev);
    }//GEN-LAST:event_buttonUpdateWorkflowActionPerformed

    private void handleRowSelection() {
        int row = this.klasseListeTabel.getSelectedRow();
        
        String navn = (String)this.klasseListeTabel.getValueAt(row, 0);

        ElevData elev = elevListerHtmlUnit.getElevFromName(navn);
        
        selectedElev    = elev;
        selectedRow     = row;
        
        updateInfoLabel(elev);
        
        setWorkflowButtonState(elev);       
        
    }

    private void updateInfoLabel(ElevData elev) {
        infoLabel.setText(
                "<html> NAVN:   " + elev.navn +
                        //  "<br>FRAVÃR: " + ((elev.almF > 10 || elev.skrF > 15) ? (elev.status instanceof StatusNone ? "KRITISK - START WORKFLOW!" : "KRITISK") : "ok" ) +
                        "<br><br>INFO: " + elev.getInfo() +
                        "</html>" );
    }
    
    private void updateRow(int row, ElevData elev){
        this.klasseListeTabel.setValueAt(elev.getStatus(), row, 3);
    }
    
    
    private void setWorkflowButtonState(ElevData elev){

        
       
            if(Utils.isWorkflowInProgress(elev) && Utils.kritiskSkrF(elev) || Utils.kritiskAlmF(elev)){
                this.buttonUpdateWorkflow.setText("Update Workflow!");
                this.buttonShowWorkflow.setEnabled(true);
                this.buttonUpdateWorkflow.setEnabled(true);
            }else{
                this.buttonUpdateWorkflow.setText("Update Workflow!");
                this.buttonShowWorkflow.setEnabled(false);
                this.buttonUpdateWorkflow.setEnabled(false);
            }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ElevListerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ElevListerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ElevListerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ElevListerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                ElevListerView nj = new ElevListerView();

                String col[] = {"Navn", "Alm.", "Skr.", "Status"};

                nj.tableModel = new MyTableModel(col, 0);

                nj.klasseListeTabel.setModel(nj.tableModel);

                nj.klasseListeTabel.getColumnModel().getColumn(0).setMinWidth(200);
                nj.klasseListeTabel.getColumnModel().getColumn(0).setPreferredWidth(200);

                nj.klasseListeTabel.getColumnModel().getColumn(3).setMinWidth(200);
                nj.klasseListeTabel.getColumnModel().getColumn(3).setPreferredWidth(200);

                
                nj.klasseListeTabel.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                        final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                        if (column == 0 && elevListerHtmlUnit != null) {

                            ElevData e = elevListerHtmlUnit.getElevFromName((String) value);

                            if (Utils.kritiskAlmFSkrF(e)) {
                                c.setBackground(Color.RED);
                            }else if(Utils.kritiskAlmF(e) || Utils.kritiskSkrF(e)){
                                c.setBackground(Color.pink);
                            } else {
                                c.setBackground(Color.LIGHT_GRAY);

                            }

                        }

                        return c;
                    }
                });

                nj.setVisible(true);
                
                nj.setWorkflowButtonState(null);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonShowWorkflow;
    private javax.swing.JButton buttonUpdateWorkflow;
    private javax.swing.JButton hentKlasseData;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable klasseListeTabel;
    private javax.swing.JButton seAlleButton;
    private javax.swing.JButton seKritiskButton;
    // End of variables declaration//GEN-END:variables
}
